openapi: 3.0.3
info:
  title: Course managaer API
  version: 1.0.0
  description: API for managing courses, users, and grades
paths:
  /api/courses/:
    get:
      operationId: courses_list
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - courses
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourseList'
          description: ''
    post:
      operationId: courses_create
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /api/courses/{id}/:
    get:
      operationId: courses_retrieve
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    put:
      operationId: courses_update
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    patch:
      operationId: courses_partial_update
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    delete:
      operationId: courses_destroy
      description: |-
        GET /api/courses/ - Public
        Returns a list of all courses

        GET /api/courses/<int:pk>/ - Public
        Returns details of a specific course

        POST /api/courses/ - Instructor
        Allows instructors to create a new course
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/enroll/:
    post:
      operationId: enroll_create
      description: |-
        POST /api/enroll/ - Student
        Allows students to enroll in a course
      tags:
      - enroll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Enrollment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Enrollment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
  /api/grades/:
    post:
      operationId: grades_create
      description: |-
        POST /api/grades/ - Instructor
        Allows instructors to create a new grade
      tags:
      - grades
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grades'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Grades'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Grades'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grades'
          description: ''
  /api/grades/course/{course_id}/:
    get:
      operationId: grades_course_retrieve
      description: |-
        GET /api/grades/course/<int:pk>/ - Instructor
        Returns a list of grades for a specific course created by the instructor
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      tags:
      - grades
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grades'
          description: ''
  /api/my-enrollments/:
    get:
      operationId: my_enrollments_list
      description: |-
        GET /api/my-enrollments/ - Student
        Returns a list of enrollments for the authenticated student
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - my-enrollments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnrollmentList'
          description: ''
  /api/my-grades/:
    get:
      operationId: my_grades_list
      description: |-
        GET /api/my-grades/ - Student
        Returns a list of grades for the authenticated student
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - my-grades
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGradesList'
          description: ''
  /api/register/:
    post:
      operationId: register_create
      description: |-
        "
        POST /api/register/ - Public
        Registro de usuario con rol
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      description: |-
        GET /api/users/ - Admin
        Lista de todos los usuarios
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        created_by:
          type: string
          readOnly: true
      required:
      - created_by
      - description
      - id
      - name
    Enrollment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        course:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course
      - created_at
      - id
      - user
    Grades:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        enrollment:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        score:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,1})?$
        comment:
          type: string
          nullable: true
      required:
      - created_at
      - enrollment
      - id
      - score
    PaginatedCourseList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    PaginatedEnrollmentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Enrollment'
    PaginatedGradesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Grades'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedCourse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        created_by:
          type: string
          readOnly: true
    RoleEnum:
      enum:
      - admin
      - student
      - instructor
      type: string
      description: |-
        * `admin` - Admin
        * `student` - Student
        * `instructor` - Instructor
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - id
      - password
      - role
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
